diff --git a/screcord/Makefile b/screcord/Makefile
index a80f05d..994108e 100644
--- a/screcord/Makefile
+++ b/screcord/Makefile
@@ -1,49 +1,10 @@
-	
 	STRIP ?= strip
-	# check if user is root
-	user = $(shell whoami)
-	ifeq ($(user),root)
-	INSTALL_DIR = /usr/lib/lv2
-	else 
-	INSTALL_DIR = ~/.lv2
-	endif
-
-	# check CPU and supported optimization flags
-	ifneq ($(shell cat /proc/cpuinfo | grep sse3 ) , )
-		SSE_CFLAGS = -msse3 -mfpmath=sse
-	else ifneq ($(shell cat /proc/cpuinfo | grep sse2 ) , )
-		SSE_CFLAGS = -msse2 -mfpmath=sse
-	else ifneq ($(shell cat /proc/cpuinfo | grep sse ) , )
-		SSE_CFLAGS = -msse -mfpmath=sse
-		else ifneq ($(shell cat /proc/cpuinfo | grep ARM ) , )
-		ifneq ($(shell cat /proc/cpuinfo | grep ARMv7 ) , )
-			ifneq ($(shell cat /proc/cpuinfo | grep vfpd32 ) , )
-				SSE_CFLAGS = -march=armv7-a -mfpu=vfpv3 
-			else ifneq ($(shell cat /proc/cpuinfo | grep vfpv3 ) , )
-				SSE_CFLAGS = -march=armv7-a -mfpu=vfpv3
-			endif
-		else
-			ARMCPU = "YES"
-		endif
-	else
-		SSE_CFLAGS =
-	endif
-
-	# check LD version
-	ifneq ($(shell xxd --version 2>&1 | head -n 1 | grep xxd),)
-		USE_XXD = 1
-	else ifneq ($(shell $(LD) --version 2>&1 | head -n 1 | grep LLD),)
-		ifneq ($(shell uname -a | grep  x86_64), )
-			LDEMULATION := elf_x86_64
-		else ifneq ($(shell uname -a | grep amd64), )
-			LDEMULATION := elf_x86_64
-		else ifneq ($(shell uname -a | grep i386), )
-			LDEMULATION := elf_i386
-		endif
-		USE_LDD = 1
-	else ifneq ($(shell gold --version 2>&1 | head -n 1 | grep gold),)
-		LD = gold
-	endif
+	INSTALL_DIR ?= /usr/lib/lv2
+
+	SSE_CFLAGS ?= ""
+	ARMCPU = "YES"
+
+	USE_LDD ?= 1
 
 	# set bundle name
 	NAME = sc_record
@@ -61,7 +22,7 @@
 
 	# set compile flags
 	CXXFLAGS += -I. -I./dsp  -fPIC -DPIC -O2 -Wall -funroll-loops `pkg-config --cflags sndfile`\
-	-ffast-math -fomit-frame-pointer -fstrength-reduce -fdata-sections -Wl,--gc-sections $(SSE_CFLAGS)
+	-ffast-math -fomit-frame-pointer -fstrength-reduce -fdata-sections -Wl,--gc-sections
 	LDFLAGS += -I.  -lm -pthread -shared -Llibrary -lc -lm -lrt -fPIC -DPIC `pkg-config --libs sndfile` 
 	GUI_LDFLAGS += -I. -I$(HEADER_DIR) \
 	-L. $(LIB_DIR)libxputty.a -shared `pkg-config --static --cflags --libs cairo x11` -lm 
@@ -69,10 +30,6 @@
 	OBJECTS = $(NAME).cpp 
 	GUI_OBJECTS = $(NAME)_x11ui.c
 	RES_OBJECTS = record.o
-	## output style (bash colours)
-	BLUE = "\033[1;34m"
-	RED =  "\033[1;31m"
-	NONE = "\033[0m"
 
 .PHONY : mod all clean install uninstall 
 
@@ -80,22 +37,19 @@ all : check $(NAME)
 	@mkdir -p ../$(BUNDLE)
 	@cp ./*.ttl ../$(BUNDLE)
 	@mv ./*.so ../$(BUNDLE)
-	@if [ -f ../$(BUNDLE)/$(NAME).so ]; then echo $(BLUE)"build finish, now run make install"; \
-	else echo $(RED)"sorry, build failed"; fi
-	@echo $(NONE)
+	@if [ -f ../$(BUNDLE)/$(NAME).so ]; then echo "build finish, now run make install"; \
+	else echo "sorry, build failed"; fi
 
 mod :  nogui
 	@mkdir -p ../$(BUNDLE)
 	@cp -R ./MOD/* ../$(BUNDLE)
 	@mv ./*.so ../$(BUNDLE)
-	@if [ -f ../$(BUNDLE)/$(NAME).so ]; then echo $(BLUE)"build finish, now run make install"; \
-	else echo $(RED)"sorry, build failed"; fi
-	@echo $(NONE)
+	@if [ -f ../$(BUNDLE)/$(NAME).so ]; then echo "build finish, now run make install"; \
+	else echo "sorry, build failed"; fi
 
 check :
 ifdef ARMCPU
-	@echo $(RED)ARM CPU DEDECTED, please check the optimization flags
-	@echo $(NONE)
+	@echo ARM CPU DEDECTED, please check the optimization flags
 endif
 
 $(RESOURCEHEADER): $(RESOURCES_OBJ)
@@ -127,26 +81,26 @@ clean :
 	@rm -f $(NAME).so
 	@rm -rf ../$(BUNDLE)
 	@rm -rf ./$(RES_OBJECTS)
-	@echo ". ." $(BLUE)", clean up"$(NONE)
+	@echo ". ." ", clean up"
 
 dist-clean :
 	@rm -f $(NAME).so
 	@rm -rf ../$(BUNDLE)
 	@rm -rf ./$(RES_OBJECTS)
-	@echo ". ." $(BLUE)", clean up"$(NONE)
+	@echo ". ." ", clean up"
 
 install :
 ifneq ("$(wildcard ../$(BUNDLE))","")
 	@mkdir -p $(DESTDIR)$(INSTALL_DIR)/$(BUNDLE)
 	cp -r ../$(BUNDLE)/* $(DESTDIR)$(INSTALL_DIR)/$(BUNDLE)
-	@echo ". ." $(BLUE)", done"$(NONE)
+	@echo ". ." ", done"
 else
-	@echo ". ." $(BLUE)", you must build first"$(NONE)
+	@echo ". ." ", you must build first"
 endif
 
 uninstall :
 	@rm -rf $(INSTALL_DIR)/$(BUNDLE)
-	@echo ". ." $(BLUE)", done"$(NONE)
+	@echo ". ." ", done"
 
 $(NAME) : clean $(RES_OBJECTS)
 	$(CXX) $(CXXFLAGS) $(OBJECTS) $(LDFLAGS) -o $(NAME).so
